---
# file: global.yml

# This play runs first, and gathers a complete set of properties for everything
- hosts: all
  sudo: True
  tasks:
    setup:
      filter: '*'

- hosts: all
  sudo: True
  roles:
    - { role: kernel, tags: [ 'kernel' ] }

- hosts: all
  sudo: True
  tasks:
    setup:
      filter: '*'

# This imports provisioner-specific variables. We do this as a block, which makes access 
# more awkward, but does allow us not to worry about other things. 
- hosts: all
  sudo: True
  vars_files:
    - [ 'vars/provisioning_platform_{{ provisioning_platform }}.yml', 'vars/provisioning_platform_default.yml']
  tasks:
    - name: set provisioner facts
      action: set_fact
      args: 
        provisioner_values: "{{ provisioner_values }}"

# Next, let's generate common files, such as the hosts file. This requires the
# previous setup to have been run in a separate play, it seemed
- hosts: all
  sudo: True
  roles:
    - { role: common, tags: [ 'common' ] }

- hosts: grid-master:grid-worker
  sudo: True
  roles:
    - { role: storage, storage_system: 'glusterfs', storage_action: 'install' }

- hosts: grid-master
  sudo: True
  roles:
    - { role: storage, storage_system: 'glusterfs', storage_action: 'start' }

# Add all the tools that we need for the full pipeline. Order does matter
# here. It's a good plan to build common platforms like perl and python before you
# use them. And use the right ones. 
- hosts: grid-worker 
  sudo: True
  roles:
    - { role: tools, selected_tool: 'r' }
    - { role: tools, selected_tool: 'perl' }
    - { role: tools, selected_tool: 'python27' }
    - { role: tools, selected_tool: 'bam2fastq' }
    - { role: tools, selected_tool: 'bfast' }
    - { role: tools, selected_tool: 'blat' }
    - { role: tools, selected_tool: 'bowtie2' }
    - { role: tools, selected_tool: 'idba' }
    - { role: tools, selected_tool: 'picard' }
    - { role: tools, selected_tool: 'sga' }
    - { role: tools, selected_tool: 'shrimp2' }
    - { role: tools, selected_tool: 'capsid' }
    - { role: tools, selected_tool: 'capsid_secure_components' }
    - { role: tools, selected_tool: 'phrap' }
    - { role: tools, selected_tool: 'trf' }
    - { role: tools, selected_tool: 'repeatmasker' }

# We also need the data download system. This we only need on the master node.
# We also can grab and download the databases. This is also master-consistent, as
# we only want one copy, and written on the shared data drives. Use a similar 
# to the tools, to allow us to break up the components a bit more easily.

- hosts: grid-master 
  sudo: True
  roles:
    - { role: data-download, selected_tool: 'gene_torrent' }
    - { role: data-download, selected_tool: 'blast' }
    - { role: data-download, selected_tool: 's3cmd' }

- hosts: database
  sudo: True
  roles:
    - role: database

- hosts: webapp
  sudo: True
  roles:
    - role: java
    - role: webapp

